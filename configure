#!/bin/bash
#


# Load base module
source mklove/modules/configure.base

# Read some special command line options right away that must be known prior to
# sourcing modules.
mkl_in_list "$*" "--disable-downloads" && MKL_NO_DOWNLOAD=1
mkl_in_list "$*" "--debug" && MKL_DEBUG=1

# Create temporary Makefile and header files
trap "{ rm -f $MKL_OUTMK $MKL_OUTH; }" EXIT



##
## Load builtin modules
##

# Build OS detection
mkl_require build_os

# Host/target support
mkl_require host

# Compiler detection
mkl_require cc

# Load application provided modules, if any.
for fname in configure.* ; do
    # Skip base module and temporary files
    if [[ $fname = *~ ]]; then
        continue
    fi

    mkl_require $fname
done




##
## Argument parsing (options)
##
##

# Parse arguments
while [[ ! -z $@ ]]; do
    if [[ $1 != --* ]]; then
        mkl_err "Unknown non-option argument: $1"
        mkl_usage
        exit 1
    fi

    opt=${1#--}
    shift

    if [[ $opt = *=* ]]; then
        name="${opt%=*}"
        arg="${opt#*=}"
    else
        name="$opt"
        arg=""
    fi

    # Check if this option needs an argument.
    reqarg=$(mkl_meta_get "MKL_OPT_ARGS" "$(mkl_env_esc $name)")
    if [[ ! -z $reqarg ]]; then
        if [[ -z $arg ]]; then
            arg=$1
            shift
        fi
        if [[ -z $arg ]]; then
            mkl_err "Missing argument to option --$name=$reqarg"
            exit 1
        fi
    else
        if [[ ! -z $arg ]]; then
            mkl_err "Option --$name expects no argument"
            exit 1
        fi
        arg=y
    fi

    case $name in
        re|reconfigure)
            oldcmd=$(grep '^# configure exec: ' config.log | \
                sed -e 's/^\# configure exec: //')
            if [[ -z $oldcmd ]]; then
                echo "No previous execution found in config.log"
                exit 1
            fi
            echo "Reconfiguring: $oldcmd"
            exec $oldcmd
            ;;

        list-modules)
            echo "Modules loaded:"
            for mod in $MKL_MODULES ; do
                echo "  $mod"
            done
            exit 0
            ;;

        list-checks)
            echo "Check functions in calling order:"
            for mf in $MKL_CHECKS ; do
                mod=${mf%:*}
                func=${mf#*:}
                echo -e "${MKL_GREEN}From module $mod:$MKL_CLR_RESET"
                declare -f $func
                echo ""
            done
            exit 0
            ;;

        help)
            mkl_usage
            exit 0
            ;;

        *)
            if ! mkl_func_exists opt_$name ; then
                mkl_err "Unknown option $opt"
                mkl_usage
                exit 1
            fi
            opt_$name $name $arg || exit 1
            ;;
    esac
done

if [[ ! -z $MKL_CLEAN ]]; then
    mkl_clean
    exit 0
fi

# Remove previous log file
rm -f $MKL_OUTDBG


# Create output files
echo "# configure exec: $0 $*" > $MKL_OUTDBG
echo "# On $(date)" >> $MKL_OUTDBG

rm -f $MKL_OUTMK $MKL_OUTH
mkl_write_mk "# Automatically generated by $0 $*"
mkl_write_h "// Automatically generated by $0 $*"
mkl_write_h "#pragma once"


# Load cache file
mkl_cache_read

# Run checks
mkl_checks_run

# Check accumulated failures, will not return on failure.
mkl_check_fails

# Generate outputs
mkl_generate

# Summarize what happened
mkl_summary

# Write cache file
mkl_cache_write


echo ""
echo "Now type 'make' to build"
trap - EXIT
exit 0
